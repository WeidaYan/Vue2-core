{"version":3,"file":"vue.js","sources":["../../src/observer/array.js","../../src/util/index.js","../../src/observer/index.js","../../src/state.js","../../src/compiler/parser-html.js","../../src/compiler/index.js","../../src/init.js","../../src/index.js"],"sourcesContent":["// 我要重写数组的方法 7个 push shift unshift pop reverse sort splice 会导致数组本身发生变化\r\nlet oldArrayMethods = Array.prototype;\r\n// value._proto_ = arrayMethods 原型链查找的问题， 会向上查找， 先查找我重写的， 重写的没有会继续向上查找\r\n// arrayMethods._proto_ = oldArrayMethods\r\n// 所以 value => arrayMethods => oldArrayMethods 原型链\r\nexport let arrayMethods = Object.create(oldArrayMethods)\r\n\r\nconst methods = [\r\n    'push',\r\n    'shift',\r\n    'unshift',\r\n    'pop',\r\n    'sort',\r\n    'splice',\r\n    'reverse'\r\n]\r\nmethods.forEach(method => {\r\n    arrayMethods[method] = function (...args) {\r\n        console.log('AOP切片编程') // AOP 切片编程\r\n        const result = oldArrayMethods[method].apply(this, args); // 调用原生的数组方法 \r\n        // push unshift 添加的元素可能还是一个对象\r\n        let inserted; // 当前用户插入的元素\r\n        let ob = this.__ob__;\r\n        switch (method) {\r\n            case 'push':\r\n            case 'unshift':\r\n                inserted = args;\r\n                break;\r\n            case 'splice': // 3个新增的属性 splice 有删除 新增的功能 arr.aplice(0,1,{name:1})\r\n                inserted = args.slice(2) \r\n            default:\r\n                break;\r\n        }\r\n        if(inserted) ob.observerArray(inserted); // 将新增属性继续观测\r\n        return result;\r\n\r\n    }\r\n})","/**\r\n * \r\n * @param {*} data 当前数据是不是对象\r\n * @returns \r\n */\r\n\r\nexport function isObject(data) {\r\n   return typeof data === 'object' && data !== null;\r\n}\r\n\r\nexport function def(data,key,value) {\r\n    Object.defineProperty(data, key, {\r\n        enumerable: false,\r\n        configurable: false,\r\n        value\r\n    })\r\n}","// 把data中的数据 都使用object.defineProperty 重新定义data\r\n// Object.defineProperty 不能兼容ie8及以下 vue2 无法兼容ie8版本\r\nimport {arrayMethods} from './array';\r\nimport {isObject, def } from '../util/index';\r\n\r\nclass Observer{\r\n    constructor(value) {\r\n        // vue如果数据的层次过多 需要递归的去解析对象中的属性，依次增加set和get方法\r\n        // value.__ob__ = this; // 我给每一个监控过的对象都增加一个_ob_属性\r\n        def(value, '__ob__', this);\r\n        // Object.defineProperty(value, '__ob__', {\r\n        //     enumerable: false,\r\n        //     configurable: false,\r\n        //     value: this\r\n        // })\r\n        if(Array.isArray(value)) {\r\n            // 对数组进行监测\r\n            // 如果是数组的话并不会对索引进行观测，因为会导致性能问题\r\n            // 前端开发中很少去操作索引 常用的是 push shift splice等方法,把这些方法进行了重新定义，oop\r\n\r\n            value.__proto__ = arrayMethods;\r\n            // 如果数组里放的是对象我再监控\r\n            this.observerArray(value);\r\n\r\n        }else {\r\n            this.walk(value) // 对对象进行监测\r\n        }\r\n    }\r\n    observerArray(value) {\r\n        for(let i=0;i<value.length;i++) {\r\n            observe(value[i]);\r\n        }\r\n    }\r\n    walk(data) { // 让对象上的所有属性依次进行观测\r\n        let keys = Object.keys(data); // [name,age,address]\r\n        keys.forEach((key) => {\r\n            defineReactive(data,key,data[key]) // 定义响应式数据,vue响应式的核心方法\r\n        })\r\n    }\r\n}\r\n\r\nfunction defineReactive(data,key,value) {\r\n    observe(value); // 递归实现深度监测\r\n    Object.defineProperty(data, key, {\r\n        get() { // 获取值的时候做一些操作\r\n            return value;\r\n        },\r\n        set(newValue) { // 设置值的时候做一些操作 依赖收集？\r\n            if(newValue === value) return;\r\n            console.log('值变化了')\r\n            observe(newValue); // 继续劫持用户设置的值，因为有可能用户设置的值是一个对象\r\n            value = newValue;\r\n        }\r\n    })\r\n}\r\n\r\nexport function observe(data) {\r\n    let isObj = isObject(data);\r\n    if(!isObj) {\r\n        return;\r\n    }\r\n    return new Observer(data) // 用来观测数据\r\n}","import {observe} from './observer/index';\r\n\r\nexport function initState(vm) {\r\n    const opts = vm.$options;\r\n    // console.log(opts)\r\n    // vue的数据来源 属性 方法 数据 计算属性 watch\r\n    if(opts.props) {\r\n        initProps(vm);\r\n    }\r\n    if(opts.methods) {\r\n        initMethod(vm);\r\n    }\r\n    if(opts.data) {\r\n        initData(vm);\r\n    }\r\n    if(opts.computed) {\r\n        initComputed(vm);\r\n    }\r\n    if(opts.watch) {\r\n        initWatch(vm);\r\n    }\r\n}\r\n\r\nfunction initProps() {\r\n\r\n}\r\nfunction initMethod() {\r\n    \r\n}\r\nfunction initData(vm) {\r\n    // console.log('初始化数据', vm.$options.data)\r\n    // 数据初始化工作\r\n    let data = vm.$options.data; // 用户传递的data\r\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data;\r\n    // console.log(data)\r\n    // 对象劫持 用户改变了数据 我希望可以得到通知 =》 刷新页面\r\n    // MVVM模式 数据变化可以驱动使徒变化\r\n    // Object.defineProperty()给属性增加get()方法和set()方法\r\n    observe(data); // 响应式原理\r\n}\r\nfunction initComputed() {\r\n    \r\n}\r\nfunction initWatch() {\r\n    \r\n}","const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; // abc-aaa\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`; // <aaa:asdads>\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的 </div>\r\nconst attribute =\r\n    /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\r\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的 >\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\r\n\r\nlet root = null; // ast语法的树根\r\nlet currentParent; // 标识当前父亲是谁\r\nlet stack = [];\r\nconst ELEMENT_TYPE = 1;\r\nconst TEXT_TYPE = 3;\r\n\r\nfunction createASTElement(tagName, attrs) {\r\n    return {\r\n        tag: tagName,\r\n        type: ELEMENT_TYPE,\r\n        children: [],\r\n        attrs,\r\n        parent: null,\r\n    };\r\n}\r\n\r\nfunction start(tagName, attrs) {\r\n    // console.log('开始标签:', tagName, '属性是:', attrs)\r\n    // 遇到开始标签 就创建一个ast元素s\r\n    let elment = createASTElement(tagName, attrs);\r\n    if (!root) {\r\n        root = elment;\r\n    }\r\n    currentParent = elment; // 把当前元素标记成父ast树\r\n    stack.push(elment); // 将开始标签存放到栈中\r\n}\r\nfunction chars(text) {\r\n    // console.log('文本是:', text)\r\n    text = text.replace(/\\s/g, \"\");\r\n    if (text) {\r\n        currentParent.children.push({\r\n            text,\r\n            type: TEXT_TYPE,\r\n        });\r\n    }\r\n}\r\n// <div><p> [div] <div> <p></p></div>\r\nfunction end(tagName) {\r\n    // console.log('结束标签:', tagName)\r\n    let element = stack.pop(); // 拿到的是AST对象\r\n    // 我要标识当前这个p是属于div的儿子的\r\n    currentParent = stack[stack.length - 1];\r\n    if (currentParent) {\r\n        element.parent = currentParent;\r\n        currentParent.children.push(element); // 实现了一个树的父子关系\r\n    }\r\n}\r\n\r\nexport function parseHTML(html) {\r\n    // 不停的去解析html字符串\r\n    while (html) {\r\n        let textEnd = html.indexOf(\"<\");\r\n        if (textEnd == 0) {\r\n            // 如果当前索引为0 肯定是一个标签 开始标签或结束标签\r\n            let startTagMatch = parseStartTag(); // 通过这个方法获取到匹配的结果 tagName ， attrs\r\n            if (startTagMatch) {\r\n                start(startTagMatch.tagName, startTagMatch.attrs); // 1解析开始标签\r\n                continue; // 如果开始标签匹配完毕后， 继续下一次 匹配\r\n            }\r\n            let endTagMatch = html.match(endTag);\r\n            if (endTagMatch) {\r\n                advance(endTagMatch[0].length);\r\n                end(endTagMatch[1]); // 2解析结束标签\r\n                continue;\r\n            }\r\n        }\r\n        let text;\r\n        if (textEnd >= 0) {\r\n            text = html.substring(0, textEnd);\r\n        }\r\n        if (text) {\r\n            advance(text.length);\r\n            chars(text); // 解析文本\r\n        }\r\n    }\r\n    function advance(n) {\r\n        html = html.substring(n);\r\n    }\r\n\r\n    function parseStartTag() {\r\n        let start = html.match(startTagOpen);\r\n        if (start) {\r\n            const match = {\r\n                tagName: start[1],\r\n                attrs: [],\r\n            };\r\n            advance(start[0].length);\r\n            console.log(html);\r\n            let end, attr;\r\n            while (\r\n                !(end = html.match(startTagClose)) &&\r\n                (attr = html.match(attribute))\r\n            ) {\r\n                advance(attr[0].length); // 将属性去掉\r\n                match.attrs.push({\r\n                    name: attr[1],\r\n                    value: attr[3] || attr[4] || attr[5],\r\n                });\r\n            }\r\n            if (end) {\r\n                // 去掉开始标签的 >\r\n                advance(end[0].length);\r\n                return match;\r\n            }\r\n        }\r\n    }\r\n    return root;\r\n}","// ast语法树 是用对象来描述js原生语法的  虚拟dom 用对象来描述dom节点的\r\n// ?: 匹配不捕获\r\n// arguments[0] = 匹配到的标签 arguments[1] 匹配到的标签名字\r\nimport {parseHTML} from \"./parser-html\";\r\n\r\nexport function compileToFunction(template) {\r\n    // 1)解析html字符串，将html字符串 => ast语法树\r\n    let root = parseHTML(template);\r\n    console.log(root);\r\n    return function render() { };\r\n}\r\n\r\n// 何为AST语法树\r\n{\r\n    /* <div id=\"app\">\r\n      <p>hello<p/>\r\n  <div/>\r\n  \r\n  let root = {\r\n      tag: 'div',\r\n      attrs: [{name:'id', value: 'app'}],\r\n      parent: null,\r\n      type: 1,\r\n      children: [\r\n          {\r\n              tag:'p',\r\n              attrs: [],\r\n              parent: root,\r\n              type: 1,\r\n              children: [{\r\n                  text: 'hello',\r\n                  type: 3\r\n              }]\r\n          }\r\n      ]\r\n  } */\r\n}\r\n","\r\nimport {initState} from \"./state\";\r\n\r\nimport {compileToFunction} from './compiler/index';\r\n\r\n// 在原型上添加一个init方法\r\nexport function initMixin(Vue) {\r\n    // 初始化流程\r\n    Vue.prototype._init = function (options) {\r\n        // 数据的劫持\r\n        // console.log(this)\r\n        const vm = this; // Vue中使用this.$options 指代的就是用户传递的属性\r\n        vm.$options = options;\r\n\r\n        // 初始化状态\r\n        initState(vm); // 代码分割\r\n\r\n\r\n        // 如果用户传入了el属性 需要将页面渲染出来\r\n        // 如果用户传入了el 就要实现挂载流程\r\n\r\n        if(vm.$options.el) {\r\n            vm.$mount(vm.$options.el);\r\n        }\r\n    }\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this;\r\n        const options = vm.$options;\r\n        el = document.querySelector(el);\r\n\r\n        // 查找顺序， render =》 template 》 el\r\n\r\n        if(!options.render) {\r\n            // 对模板进行编译\r\n            let template = options.template;\r\n            if(!template && el) {\r\n                template = el.outerHTML\r\n            }\r\n            console.log(template)\r\n            // 我么需要将tempalte转换成render的方法， vue2.0实现虚拟dom vue1.0不是\r\n            const render = compileToFunction(template)\r\n            options.render = render;\r\n        }\r\n    }\r\n}","// Vue的核心代码 只是Vue的一个声明\r\nimport {initMixin} from './init';\r\n\r\nfunction Vue(options) {\r\n    // 进行Vue的初始化操作\r\n    this._init(options)\r\n}\r\n// 通过引入文件的形式 给Vue原型上添加方法\r\ninitMixin(Vue); // 给Vue原型上添加一个_init方法\r\n\r\nexport default Vue"],"names":["oldArrayMethods","Array","prototype","arrayMethods","Object","create","methods","forEach","method","console","log","args","result","apply","inserted","ob","__ob__","slice","observerArray","isObject","data","def","key","value","defineProperty","enumerable","configurable","Observer","isArray","__proto__","walk","i","length","observe","keys","defineReactive","get","set","newValue","isObj","initState","vm","opts","$options","props","initData","computed","watch","_data","call","ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","root","currentParent","stack","ELEMENT_TYPE","TEXT_TYPE","createASTElement","tagName","attrs","tag","type","children","parent","start","elment","push","chars","text","replace","end","element","pop","parseHTML","html","textEnd","indexOf","startTagMatch","parseStartTag","endTagMatch","match","advance","substring","n","attr","name","compileToFunction","template","render","initMixin","Vue","_init","options","el","$mount","document","querySelector","outerHTML"],"mappings":"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"}